-> Fundamentos

+ Es un modelo de layout que permite construir grillas o cuadriculas dinámicas. 
+ Es un valor de la propiedad display.
+ Se necesita un contenedor (.grid-container) y al menos un hijo (.grid-item).
+ Las celdas son los items, el contenedor es el contexto al que pertenecen los items.

    +-----------+-----------+-----------+-----------+ -------------> .grid-container
    |           |           |           |           |
    |     A     |     B     |     C     |     D     | -------------> .grid-items
    |           |           |           |           |
    +-----------+-----------+-----------+-----------+   
    |           |           |           |           |
    |     E     |     F     |     G     |     H     | -------------> .grid-items
    |           |           |           |           |
    +-----------+-----------+-----------+-----------+   
    |           |           |           |           |
    |     I     |     J     |     K     |     L     | -------------> .grid-items
    |           |           |           |           |
    +-----------+-----------+-----------+-----------+   

- Grid column   :   Es cada columna de nuestra cuadrícula.
- Grid grow     :   ES cada fila de nuestra cuadrícula.
- Grid cell     :   Es cada celda de nuestra cuadrícula.
- Column gap    :   Es la separación de las celdas entre columnas.
- Row gap       :   Es la separación de las celdas entre filas.
- Grid line     :   Existen column lines y row lines, son las líneas que delimitan cada columna/fila respectivamente.


            Column line     Column line     Column line     Column line
                |               |               |               |

 Row line --    +---------------+---------------+---------------+ 
                |               |               |               |
                |   Grid cell   |   Grid cell   |   Grid cell   | 
                |               |               |               |
 Row line --    +---------------+---------------+---------------+   
                |               |               |               |
                |   Grid cell   |   Grid cell   |   Grid cell   | 
                |               |               |               |
 Row line --    +---------------+---------------+---------------+   
                |               |               |               |
                |   Grid cell   |   Grid cell   |   Grid cell   | 
                |               |               |               |
 Row line --    +---------------+---------------+---------------+   


- En grid cada celda es dinámica y el resto de la cuadrícula se adapta.
- Podemos decir donde empieza cada celda y donce acaba, tanto en columna como en fila.
- Sus posibilidades son inmensas.
- Soporte total. (can I use)

*****************************************************************************************************************************

-> Ordenar elementos con grid-column y grid-row

- grid-column-start :   Establece desde que column-line empezará el elemento.
- grid-column-end   :   Establece hasta que column-line llega el elemento.
- grid-row-start    :   Establece desde que row-line empezará el elemento.
- grid-row-end      :   Establece hasta que row-line llega el elemento.

+ Existe un shorthand que engloba las 2 propiedades.
- grid-column: start / end;
- grid-row: start / end;

+ Tanto start como end admiten valores positivos, negativos y la palabra span.
- Valor positivo    : Empieza a contar las column-lines o las row-lines de izquierda a derecha.
- Valor negativo    : Empieza a contar las column-lines o las row-lines de derecha a izquierda.
- Span              : Establecemos cuantas columnas ha de ocupar, span 3 es como decirle que ocupe 3 columnas.

-> Tip: si ponemos en el valor end -1 llegará hasta el final.


*****************************************************************************************************************

-> Medidas de la cuadrícula

+ Se pueden dar medidas con cualquiera de las unidades que ya conocemos y dos más que vienen con grid:
- fr: Equivale a nº de fracciones del espacio disponible después de establecer las medidas fijas.
- auto: Equivale al espacio que quede después de repartir todos los elementos, es el último que se reparte. El tamaño mínimo del item será el espacio del contenido + el padding si lo tuviera.

+ Función repeat()
- Con la función repeat() podemos establecer repeticiones de medidas o patrones.
 en el caso "simple" recibiría 2 parámetros (valores).
    repeat(nColumnas o nFilas, medida)
    grid-template-columns: repeat(4, 100px); es lo mismo que:
    grid template-columns: 100px 100px 100px 100px;

Si como segundo valor añadimos más de una medida, construiremos un patrón, no hay límite de valores.
    grid-template-columns: repeat(2, 100px 50px); es lo mismo que:
    grid-template-columns:  100px 50px 100px 50px;


**********************************************************************************************************************

-> Explicit grid:
- Es el grid que declaramos, tanto con grid-template-columns como con grid-template-rows

-> Implicit grid: 
- Es el grid que no declaramos, los items que quedan fuera del explicit grid.

+ grid-auto-columns :   Establece qué hacer con las columnas no definidas.
+ grid-auto-rows    :   Establece qué hacer con las filas no definidas.
+ grid-auto-flow    :   Establece la dirección en la cual se va a pintar el implicit grid.
- Admite tres valores:
    - row(default)  :   Se crearán filas adicionales.
    - column        :   Se crearán columnas adicionales.
    - dense         :    Establece qué hacer con los huecos que queden.


*************************************************************************************************************************
-> minmax():
- Recibe dos parámetros (valores) para establecer el mínimo y el máximo que pueden tener los items.
    grid-template-columns: repeat(2, minmax(100px, 1fr));
    - min-content: mínimo necesario en función del contenido.
    - max-content: máximo necesario en función del contenido.

auto-fill: Crea tantos grid-items vacios como quepan en el viewport respetando las medidas.
auto-fit: Elimina los grid-items vacios que no estén ocupando.



